// === AUTH.JS: warp-ready p≈ôihla≈°ovac√≠ modul - OPRAVEN√Å VERZE ===

// ‚ö†Ô∏è Inicializace Firebase (pokud je≈°tƒõ nen√≠)
if (typeof firebase === 'undefined' || !firebase.apps.length) {
  if (typeof initializeFirebaseApp === 'function') {
    initializeFirebaseApp();
  } else {
    console.error("‚ùå Funkce initializeFirebaseApp() nen√≠ definov√°na.");
  }
}

// ‚úÖ P≈ôihl√°≈°en√≠ p≈ôes Google
function signInWithGoogle() {
  const provider = new firebase.auth.GoogleAuthProvider();
  firebase.auth().signInWithPopup(provider)
    .then(result => {
      console.log("‚úÖ P≈ôihl√°≈°en p≈ôes Google:", result.user.email);
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ p≈ôes Google:", error);
    });
}

// ‚úÖ P≈ôihl√°≈°en√≠ p≈ôes e-mail/heslo
function signInWithEmail() {
  const email = document.getElementById("emailInput")?.value;
  const password = document.getElementById("passwordInput")?.value;

  if (!email || !password) {
    console.warn("‚ö†Ô∏è E-mail nebo heslo nebylo zad√°no.");
    return;
  }

  firebase.auth().signInWithEmailAndPassword(email, password)
    .then(userCredential => {
      console.log("‚úÖ P≈ôihl√°≈°en e-mailem:", userCredential.user.email);
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi p≈ôihl√°≈°en√≠ e-mailem:", error);
    });
}

// ‚úÖ Odhl√°≈°en√≠
function signOut() {
  firebase.auth().signOut()
    .then(() => {
      console.log("üëã U≈æivatel byl odhl√°≈°en.");
      // NOV√â: Vyƒçisti UI p≈ôi odhl√°≈°en√≠
      clearUserDataFromUI();
    })
    .catch(error => {
      console.error("‚ùå Chyba p≈ôi odhl√°≈°en√≠:", error);
    });
}

// üÜï NOV√Å FUNKCE: Vyƒçisti UI data p≈ôi odhl√°≈°en√≠
function clearUserDataFromUI() {
  try {
    // Vyma≈æ grafy a data z UI
    if (typeof clearWeightChart === 'function') {
      clearWeightChart();
    }
    
    // Vyma≈æ nastaven√≠ z UI
    if (typeof clearSettingsFromUI === 'function') {
      clearSettingsFromUI();
    }
    
    // Vyma≈æ c√≠le z UI
    if (typeof clearGoalsFromUI === 'function') {
      clearGoalsFromUI();
    }

    // Vyma≈æ formul√°≈ôe
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      if (form.reset && typeof form.reset === 'function') {
        form.reset();
      }
    });
    
    console.log("üßπ UI vyƒçi≈°tƒõno po odhl√°≈°en√≠");
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi ƒçi≈°tƒõn√≠ UI:", error);
  }
}

// ‚úÖ KL√çƒåOV√Å OPRAVA: Sledujeme stav p≈ôihl√°≈°en√≠ s lep≈°√≠m timingem
firebase.auth().onAuthStateChanged(async (user) => {
  const loginSection = document.getElementById("login-section");
  const dashboardSection = document.getElementById("dashboard-section");
  const userNameSpan = document.getElementById("user-name");
  const loginPanel = document.getElementById("loginPanel");
  const userPanel = document.getElementById("userPanel");
  const userEmail = document.getElementById("userEmail");

  if (user) {
    console.log(`üü¢ U≈æivatel p≈ôihl√°≈°en: ${user.email} (UID: ${user.uid})`);

    // UI p≈ôepnut√≠
    if (loginSection && dashboardSection && userNameSpan) {
      loginSection.style.display = "none";
      dashboardSection.style.display = "block";
      userNameSpan.textContent = user.displayName || user.email;
    }

    if (loginPanel && userPanel && userEmail) {
      loginPanel.style.display = "none";
      userPanel.style.display = "block";
      userEmail.textContent = user.email;
    }

    // ‚úÖ ZJEDNODU≈†EN√â ≈òE≈†EN√ç: Pou≈æij pouze loadData() funkci
    try {
      // Poƒçkej na Firebase inicializaci
      if (typeof waitForAuth === 'function') {
        await waitForAuth();
        console.log("üîÑ Firebase plnƒõ inicializov√°n");
      } else {
        // Z√°lo≈æn√≠ ƒçek√°n√≠ 1 sekunda
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // Zavolej loadData() - ta u≈æ m√° ve≈°kerou logiku pro naƒç√≠t√°n√≠ a zobrazen√≠
      if (typeof loadData === 'function') {
        console.log("üì¶ Vol√°m loadData() pro naƒçten√≠ a zobrazen√≠ dat...");
        await loadData(true); // forceReload = true pro jistotu
        console.log("üéâ Data naƒçtena a zobrazena!");
      } else {
        console.error("‚ùå Funkce loadData() nen√≠ definov√°na!");
      }

    } catch (error) {
      console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ dat po p≈ôihl√°≈°en√≠:", error);
      // Zkus to znovu po 2 sekund√°ch
      setTimeout(async () => {
        try {
          if (typeof loadData === 'function') {
            await loadData(true);
          }
        } catch (retryError) {
          console.error("‚ùå Druh√Ω pokus o naƒçten√≠ dat tak√© selhal:", retryError);
        }
      }, 2000);
    }

  } else {
    console.log("üî¥ U≈æivatel odhl√°≈°en.");

    // Vyƒçisti UI data p≈ôed p≈ôepnut√≠m
    clearUserDataFromUI();

    if (loginSection && dashboardSection && userNameSpan) {
      loginSection.style.display = "block";
      dashboardSection.style.display = "none";
      userNameSpan.textContent = "";
    }

    if (loginPanel && userPanel && userEmail) {
      loginPanel.style.display = "block";
      userPanel.style.display = "none";
      userEmail.textContent = "";
    }
  }
});

// ‚úÖ Po naƒçten√≠ DOMu napoj√≠me tlaƒç√≠tka
document.addEventListener("DOMContentLoaded", () => {
  const googleBtn = document.getElementById("google-login-button");
  const emailBtn = document.getElementById("login-button");
  const logoutBtn = document.getElementById("logout-button");

  if (googleBtn) {
    googleBtn.addEventListener("click", signInWithGoogle);
  } else {
    console.warn("‚ö†Ô∏è google-login-button nenalezen.");
  }

  if (emailBtn) {
    emailBtn.addEventListener("click", signInWithEmail);
  }

  if (logoutBtn) {
    logoutBtn.addEventListener("click", signOut);
  } else {
    console.warn("‚ö†Ô∏è logout-button nen√≠ v DOM.");
  }
});

// ‚úÖ Glob√°ln√≠ funkce pro refresh dat
window.refreshUserData = async function() {
  const user = firebase.auth().currentUser;
  if (user) {
    if (typeof loadData === 'function') {
      await loadData(true); // forceReload = true
    }
  } else {
    console.warn("‚ö†Ô∏è Nelze naƒç√≠st data - u≈æivatel nen√≠ p≈ôihl√°≈°en");
  }
};
